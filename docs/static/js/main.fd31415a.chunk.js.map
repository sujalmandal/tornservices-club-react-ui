{"version":3,"sources":["features/registration-login/RegistrationLoginSlice.js","features/registration-login/RegistrationLogin.js","features/job-search-bar/JobSearchBarSlice.js","features/job-search-bar/JobSearchBar.js","features/job-list-table/JobListTableSlice.js","features/job-list-table/JobListTable.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["registrationLoginSlice","createSlice","name","initialState","apiKey","subscriberType","tornPlayerName","tornPlayerId","playerId","isLoggedIn","reducers","login","state","action","register","selectPlayerInfo","registrationLogin","player","actions","RegistrationLogin","useDispatch","useSelector","useState","playerData","setPlayerData","lgShow","setLgShow","Button","onClick","variant","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Form","inline","FormControl","defaultValue","type","className","onChange","e","target","value","jobSearchBarSlice","jobType","pay","amount","postedBefore","searchJobs","console","log","jobFilters","payload","selectGlobalJobFilters","jobSearchBar","JobSearchBar","dispatch","setJobFilters","Navbar","fixed","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","style","paddingLeft","Col","minWidth","Label","color","NavDropdown","title","onSelect","jobTypeParam","Item","eventKey","Divider","width","max","step","jobListTableSlice","selectJobs","jobListTable","jobs","JobListTable","globalJobs","height","background","minHeight","paddingTop","CardColumns","map","job","index","Card","body","inverse","backgroundColor","borderColor","CardTitle","tag","CardText","targetPlayerName","App","useEffect","document","configureStore","reducer","jobSearchBarReducer","jobListTableReducer","registrationLoginReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd31415a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const registrationLoginSlice = createSlice({\r\n    name: 'registrationLogin',\r\n    initialState: {\r\n        \"player\":{\r\n          apiKey: \"\",\r\n          subscriberType: \"\",\r\n          tornPlayerName: \"\",\r\n          tornPlayerId: \"\",\r\n          playerId: \"\",\r\n          isLoggedIn: false\r\n      }\r\n    },\r\n    reducers: {\r\n      login: (state,action) => {\r\n        \r\n      },\r\n      register: (state,action) => {\r\n        \r\n      }\r\n    },\r\n  });\r\n\r\nexport const selectPlayerInfo = (state) => state.registrationLogin.player;\r\n\r\nexport const {login,register} = registrationLoginSlice.actions;\r\nexport default registrationLoginSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, Modal,Form, FormControl, Container } from 'react-bootstrap';\r\nimport {\r\n    login,\r\n    register,\r\n    selectPlayerInfo\r\n} from './RegistrationLoginSlice';\r\n\r\nexport function RegistrationLogin() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalPlayerInfo = useSelector(selectPlayerInfo);\r\n\r\n    /* local, feature-level states */\r\n    const [playerData, setPlayerData] = useState({\r\n        apiKey: \"\",\r\n        subscriberType: \"\",\r\n        tornPlayerName: \"\",\r\n        tornPlayerId: \"\",\r\n        playerId: \"\",\r\n        isLoggedIn: false\r\n    });\r\n\r\n    const [lgShow, setLgShow] = useState(false);\r\n\r\n    const setAPIKey = function(e){\r\n        setPlayerData({\r\n            ...playerData,\r\n            apiKey: e.target.value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => setLgShow(true)} variant=\"outline-success\" >Login</Button>\r\n            <Modal\r\n                show={lgShow}\r\n                onHide={() => setLgShow(false)}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                >\r\n               \r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">Login with your torn API key</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <Container>\r\n\r\n                    <Form inline>\r\n                        <FormControl  defaultValue={playerData.apiKey} type=\"text\" className=\"mr-sm-4\" onChange={setAPIKey} />\r\n                        <Button variant=\"outline-success\" >Login!</Button>\r\n                    </Form>\r\n                    </Container>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const jobSearchBarSlice = createSlice({\r\n    name: 'jobSearchBar',\r\n    initialState: {\r\n        \"jobFilters\":{\r\n          jobType:\"\",\r\n          pay:0,\r\n          amount:0,\r\n          postedBefore:\"\"\r\n      }\r\n    },\r\n    reducers: {\r\n      searchJobs: (state,action) => {\r\n        console.log(action)\r\n        state.jobFilters = action.payload;\r\n      }\r\n    },\r\n  });\r\n\r\nexport const selectGlobalJobFilters = (state) => state.jobSearchBar.jobFilters;\r\n\r\nexport const {searchJobs} = jobSearchBarSlice.actions;\r\nexport default jobSearchBarSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, Col } from 'react-bootstrap';\r\nimport { RegistrationLogin } from '../registration-login/RegistrationLogin';\r\nimport {\r\n    searchJobs,\r\n    selectGlobalJobFilters\r\n} from './JobSearchBarSlice';\r\n\r\nexport function JobSearchBar() {\r\n\r\n    const yyyy_mm_dd = function(dateIn) {\r\n        var yyyy = dateIn.getFullYear();\r\n        var mm = dateIn.getMonth() + 1; \r\n        var dd = dateIn.getDate();\r\n        var dateAsString = yyyy+\"-\"+mm+\"-\"+dd;\r\n        console.log(dateAsString);\r\n        return dateAsString; \r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalJobFilters = useSelector(selectGlobalJobFilters);\r\n\r\n    /* local, feature-level states */\r\n    const [jobFilters, setJobFilters] = useState({\r\n        jobType: \"Bounty\",\r\n        amount: 0,\r\n        pay: 50000,\r\n        postedBefore:\"\"\r\n    });\r\n\r\n \r\n      \r\n    const updateJobType=function(jobTypeParam){\r\n        setJobFilters({\r\n            ...jobFilters,\r\n            jobType: jobTypeParam\r\n        });\r\n    }\r\n\r\n    const updatePostedDate=function(e){\r\n        setJobFilters({\r\n            ...jobFilters,\r\n            postedBefore: e.target.value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">Find available jobs</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\" style={{paddingLeft:\"15vw\"}}>\r\n                        <Form inline>\r\n\r\n                            <Col style={{minWidth:\"12vw\"}}>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>What kind of job?</Form.Label>\r\n                                <NavDropdown title={jobFilters.jobType} id=\"basic-nav-dropdown\" onSelect={updateJobType}>\r\n                                    <NavDropdown.Item eventKey=\"Hospitalize\">Hospitalize</NavDropdown.Item>\r\n                                    <NavDropdown.Item eventKey=\"Mug\">Mug</NavDropdown.Item>\r\n                                    <NavDropdown.Divider/>\r\n                                    <NavDropdown.Item eventKey=\"Bounty reveal\">Bounty reveal</NavDropdown.Item>\r\n                                    <NavDropdown.Item eventKey=\"Bounty\">Bounty</NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            </Col>\r\n                            \r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>Posted After Date?</Form.Label>\r\n                                <FormControl className=\"mr-sm-4\" type=\"date\" name='posted_after' value={jobFilters.postedBefore} onChange={updatePostedDate} />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>How many?</Form.Label>\r\n                                <FormControl style={{ width: \"5vw\" }} max=\"99\" value={jobFilters.amount} type=\"number\" className=\"mr-sm-4\" onChange={(e) => {\r\n                                    setJobFilters({\r\n                                        ...jobFilters,\r\n                                        amount: e.target.value\r\n                                    })\r\n                                }} />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>Minimum Pay?</Form.Label>\r\n                                <FormControl style={{ width: \"8vw\" }} max=\"100000000\" step=\"10000\"  value={jobFilters.pay} type=\"number\" className=\"mr-sm-4\" onChange={(e) => {\r\n                                    setJobFilters({\r\n                                        ...jobFilters,\r\n                                        pay: e.target.value\r\n                                    })\r\n                                }} />\r\n                            </Col>\r\n                            <Button onClick={() => { dispatch(searchJobs(jobFilters)) }} variant=\"outline-success\" >Find Jobs!</Button>\r\n                        </Form>\r\n                    </Nav>\r\n\r\n                    <Nav style={{paddingLeft:\"10vw\"}}>\r\n                       <RegistrationLogin/>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n\r\n            </Navbar>\r\n\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const jobListTableSlice = createSlice({\r\n    name: 'jobListTable',\r\n    initialState: {\r\n        \"jobs\":[{\r\n          \"jobType\":\"Mug\",\r\n          \"amount\":5,\r\n          \"targetPlayerName\":\"Transhumanist\",\r\n          \"pay\":50000\r\n        }]\r\n    },\r\n    reducers: {\r\n      searchJobs: (state,action) => {\r\n        console.log(action)\r\n        state.jobFilters = action.payload;\r\n      }\r\n    }\r\n  });\r\n\r\nexport const selectJobs = (state) => state.jobListTable.jobs;\r\n\r\nexport const {searchJobs} = jobListTableSlice.actions;\r\nexport default jobListTableSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Container, Card, Button, CardImg, CardTitle, CardText, CardColumns } from 'reactstrap';\r\nimport {\r\n    searchJobs,\r\n    selectJobs\r\n} from './JobListTableSlice';\r\n\r\nexport function JobListTable() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalJobs = useSelector(selectJobs);\r\n\r\n    /* local, feature-level states */\r\n    const [selectedJob, setSelectedJob] = useState(null);\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", background: \"#2d405f\", minHeight:\"100vh\" }}>\r\n            <Container style={{ paddingTop: \"100px\" }}  >\r\n                <CardColumns>\r\n                    { globalJobs.map((job, index) => (\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\r\n                            <CardTitle tag=\"h5\">$50,000</CardTitle>\r\n                            <CardText>{job.jobType} {job.targetPlayerName} x {job.amount}</CardText>\r\n                            <CardText>Posted on : 30-03-2021</CardText>\r\n                            <Button>Claim Job !</Button>\r\n                        </Card>    \r\n                    ))}\r\n                </CardColumns>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","import React ,{useEffect} from 'react';\r\nimport './App.css';\r\nimport { JobSearchBar } from './features/job-search-bar/JobSearchBar';\r\nimport { JobListTable } from './features/job-list-table/JobListTable';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    document.title = \"Torn City Services\"\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <JobSearchBar/>\r\n        <JobListTable/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport jobSearchBarReducer from '../features/job-search-bar/JobSearchBarSlice';\r\nimport jobListTableReducer from '../features/job-list-table/JobListTableSlice';\r\nimport registrationLoginReducer from '../features/registration-login/RegistrationLoginSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    jobSearchBar: jobSearchBarReducer,\r\n    jobListTable: jobListTableReducer,\r\n    registrationLogin : registrationLoginReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}